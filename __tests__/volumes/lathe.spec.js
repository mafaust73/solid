import { Lathe } from "../../src/volumes/lathe";
import { Vector } from "../../src/common/common";
import { Wavefront } from "../../src/io/wavefront";
import { Path } from "../../src/misc/path";
import { Point } from "../../src/misc/point";

describe("lathe", () => {
  test("simple", () => {
    const expected = `v 6.123233995736766e-17 1 -1
v 1 1 0
v 0 1 0
v 0 1 0
v 6.123233995736766e-17 1 -1
v 0 1 0
v 6.123233995736766e-17 -1 -1
v 1 -1 0
v 1 1 0
v 6.123233995736766e-17 1 -1
v 6.123233995736766e-17 -1 -1
v 1 1 0
v 0 -1 0
v 0 -1 0
v 1 -1 0
v 6.123233995736766e-17 -1 -1
v 0 -1 0
v 1 -1 0
v 0 1 0
v 0 1 0
v 0 -1 0
v 0 -1 0
v 0 1 0
v 0 -1 0
v -1 1 -1.2246467991473532e-16
v 6.123233995736766e-17 1 -1
v 0 1 0
v 0 1 0
v -1 1 -1.2246467991473532e-16
v 0 1 0
v -1 -1 -1.2246467991473532e-16
v 6.123233995736766e-17 -1 -1
v 6.123233995736766e-17 1 -1
v -1 1 -1.2246467991473532e-16
v -1 -1 -1.2246467991473532e-16
v 6.123233995736766e-17 1 -1
v 0 -1 0
v 0 -1 0
v 6.123233995736766e-17 -1 -1
v -1 -1 -1.2246467991473532e-16
v 0 -1 0
v 6.123233995736766e-17 -1 -1
v 0 1 0
v 0 1 0
v 0 -1 0
v 0 -1 0
v 0 1 0
v 0 -1 0
v -1.8369701987210297e-16 1 1
v -1 1 -1.2246467991473532e-16
v 0 1 0
v 0 1 0
v -1.8369701987210297e-16 1 1
v 0 1 0
v -1.8369701987210297e-16 -1 1
v -1 -1 -1.2246467991473532e-16
v -1 1 -1.2246467991473532e-16
v -1.8369701987210297e-16 1 1
v -1.8369701987210297e-16 -1 1
v -1 1 -1.2246467991473532e-16
v 0 -1 0
v 0 -1 0
v -1 -1 -1.2246467991473532e-16
v -1.8369701987210297e-16 -1 1
v 0 -1 0
v -1 -1 -1.2246467991473532e-16
v 0 1 0
v 0 1 0
v 0 -1 0
v 0 -1 0
v 0 1 0
v 0 -1 0
v 1 1 2.4492935982947064e-16
v -1.8369701987210297e-16 1 1
v 0 1 0
v 0 1 0
v 1 1 2.4492935982947064e-16
v 0 1 0
v 1 -1 2.4492935982947064e-16
v -1.8369701987210297e-16 -1 1
v -1.8369701987210297e-16 1 1
v 1 1 2.4492935982947064e-16
v 1 -1 2.4492935982947064e-16
v -1.8369701987210297e-16 1 1
v 0 -1 0
v 0 -1 0
v -1.8369701987210297e-16 -1 1
v 1 -1 2.4492935982947064e-16
v 0 -1 0
v -1.8369701987210297e-16 -1 1
v 0 1 0
v 0 1 0
v 0 -1 0
v 0 -1 0
v 0 1 0
v 0 -1 0
vn 6.123233995736766e-17 0 -1
vn 1 0 0
vn 0 1 0
vn 0 1 0
vn 6.123233995736766e-17 0 -1
vn 0 1 0
vn 0 -1 0
vn 0 -1 0
vn 1 0 0
vn 6.123233995736766e-17 0 -1
vn 0 -1 0
vn 1 0 0
vn -6.123233995736766e-17 0 1
vn -1 0 0
vn 0 -1 0
vn 0 -1 0
vn -6.123233995736766e-17 0 1
vn 0 -1 0
vn 0 1 0
vn 0 1 0
vn -1 0 0
vn -6.123233995736766e-17 0 1
vn 0 1 0
vn -1 0 0
vn -1 0 -1.2246467991473532e-16
vn 6.123233995736766e-17 0 -1
vn 0 1 0
vn 0 1 0
vn -1 0 -1.2246467991473532e-16
vn 0 1 0
vn 0 -1 0
vn 0 -1 0
vn 6.123233995736766e-17 0 -1
vn -1 0 -1.2246467991473532e-16
vn 0 -1 0
vn 6.123233995736766e-17 0 -1
vn 1 0 1.2246467991473532e-16
vn -6.123233995736766e-17 0 1
vn 0 -1 0
vn 0 -1 0
vn 1 0 1.2246467991473532e-16
vn 0 -1 0
vn 0 1 0
vn 0 1 0
vn -6.123233995736766e-17 0 1
vn 1 0 1.2246467991473532e-16
vn 0 1 0
vn -6.123233995736766e-17 0 1
vn -1.8369701987210297e-16 0 1
vn -1 0 -1.2246467991473532e-16
vn 0 1 0
vn 0 1 0
vn -1.8369701987210297e-16 0 1
vn 0 1 0
vn 0 -1 0
vn 0 -1 0
vn -1 0 -1.2246467991473532e-16
vn -1.8369701987210297e-16 0 1
vn 0 -1 0
vn -1 0 -1.2246467991473532e-16
vn 1.8369701987210297e-16 0 -1
vn 1 0 1.2246467991473532e-16
vn 0 -1 0
vn 0 -1 0
vn 1.8369701987210297e-16 0 -1
vn 0 -1 0
vn 0 1 0
vn 0 1 0
vn 1 0 1.2246467991473532e-16
vn 1.8369701987210297e-16 0 -1
vn 0 1 0
vn 1 0 1.2246467991473532e-16
vn 1 0 2.4492935982947064e-16
vn -1.8369701987210297e-16 0 1
vn 0 1 0
vn 0 1 0
vn 1 0 2.4492935982947064e-16
vn 0 1 0
vn 0 -1 0
vn 0 -1 0
vn -1.8369701987210297e-16 0 1
vn 1 0 2.4492935982947064e-16
vn 0 -1 0
vn -1.8369701987210297e-16 0 1
vn -1 0 -2.4492935982947064e-16
vn 1.8369701987210297e-16 0 -1
vn 0 -1 0
vn 0 -1 0
vn -1 0 -2.4492935982947064e-16
vn 0 -1 0
vn 0 1 0
vn 0 1 0
vn 1.8369701987210297e-16 0 -1
vn -1 0 -2.4492935982947064e-16
vn 0 1 0
vn 1.8369701987210297e-16 0 -1
f 3//3 2//2 1//1
f 6//6 5//5 4//4
f 9//9 8//8 7//7
f 12//12 11//11 10//10
f 15//15 14//14 13//13
f 18//18 17//17 16//16
f 21//21 20//20 19//19
f 24//24 23//23 22//22
f 27//27 26//26 25//25
f 30//30 29//29 28//28
f 33//33 32//32 31//31
f 36//36 35//35 34//34
f 39//39 38//38 37//37
f 42//42 41//41 40//40
f 45//45 44//44 43//43
f 48//48 47//47 46//46
f 51//51 50//50 49//49
f 54//54 53//53 52//52
f 57//57 56//56 55//55
f 60//60 59//59 58//58
f 63//63 62//62 61//61
f 66//66 65//65 64//64
f 69//69 68//68 67//67
f 72//72 71//71 70//70
f 75//75 74//74 73//73
f 78//78 77//77 76//76
f 81//81 80//80 79//79
f 84//84 83//83 82//82
f 87//87 86//86 85//85
f 90//90 89//89 88//88
f 93//93 92//92 91//91
f 96//96 95//95 94//94
`;

    let path = new Path()
      .moveTo(new Point(0, 1))
      .lineTo(new Point(1, 1))
      .lineTo(new Point(1, -1))
      .lineTo(new Point(0, -1));
    let lathe = new Lathe(path, 10, 4);
    expect(new Wavefront().write(lathe)).toBe(expected);
  });
});
